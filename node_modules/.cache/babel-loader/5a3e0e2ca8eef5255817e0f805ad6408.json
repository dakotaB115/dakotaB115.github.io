{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _objectAssign = require('object-assign');\n\nvar _objectAssign2 = _interopRequireDefault(_objectAssign);\n\nvar _propTypes = require('./propTypes');\n\nvar _compareProps = require('./compareProps');\n\nvar _compareProps2 = _interopRequireDefault(_compareProps);\n\nvar _mergeAndExtractProps2 = require('./mergeAndExtractProps');\n\nvar _mergeAndExtractProps3 = _interopRequireDefault(_mergeAndExtractProps2);\n\nvar _extractStyle = require('./extractStyle');\n\nvar _recursiveNodeCheck = require('./recursiveNodeCheck');\n\nvar _recursiveNodeCheck2 = _interopRequireDefault(_recursiveNodeCheck);\n\nvar _inputTracker = require('./inputTracker');\n\nvar _inputTracker2 = _interopRequireDefault(_inputTracker);\n\nvar _notifier = require('./notifier');\n\nvar _syntheticClick = require('./syntheticClick');\n\nvar _syntheticClick2 = _interopRequireDefault(_syntheticClick);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Interactive = function (_React$Component) {\n  _inherits(Interactive, _React$Component);\n\n  function Interactive(props) {\n    _classCallCheck(this, Interactive); // state is always an object with two keys, `iState` and `focus`\n\n\n    var _this = _possibleConstructorReturn(this, (Interactive.__proto__ || Object.getPrototypeOf(Interactive)).call(this, props));\n\n    _this.refCallback = function (node) {\n      _this.refNode = node;\n\n      if (node) {\n        var prevTopNode = _this.topNode; // if `as` is a component, then the `refNode` is the span wrapper, so get its firstChild\n\n        if (typeof _this.p.props.as !== 'string') _this.topNode = node.firstChild;else _this.topNode = node;\n        _this.tagName = _this.topNode.tagName.toLowerCase();\n        _this.type = _this.topNode.type && _this.topNode.type.toLowerCase();\n        _this.enterKeyTrigger = (0, _constants.enterKeyTrigger)(_this.tagName, _this.type);\n        _this.spaceKeyTrigger = (0, _constants.spaceKeyTrigger)(_this.tagName, _this.type); // if as is a react component then won't have access to tag in componentWillReceiveProps,\n        // so check if click listener needs to be set again here (after this.tagName is set)\n\n        if (_this.setClickListener(_this.p.props)) _this.p.passThroughProps.onClick = _this.handleEvent; // if node is a new node then call manageFocus to keep browser in sync with RI,\n        // note: above assignments can't be in this if statement b/c node could have mutated,\n        // node should maintain focus state when mutated\n\n        if (prevTopNode !== _this.topNode) {\n          _this.manageFocus('refCallback'); // if refDOMNode prop, pass along new DOM node\n\n\n          _this.p.props.refDOMNode && _this.p.props.refDOMNode(_this.topNode);\n        }\n      }\n    };\n\n    _this.handleEvent = function (e) {\n      if (!_this.isValidEvent(e)) return;\n\n      if (_constants.mouseEvents[e.type]) {\n        if (_this.handleMouseEvent(e) === 'terminate') return;\n      } else if (_constants.touchEvents[e.type] || e.type === 'touchmove' || e.type === 'touchtapcancel') {\n        if (_this.handleTouchEvent(e) === 'terminate') return;\n      } else if (e.type === 'click') {\n        if (_this.handleClickEvent(e) === 'terminate') return;\n      } else if (_this.handleOtherEvent(e) === 'terminate') return; // compute the new state object and pass it as an argument to updateState,\n      // which calls setState and state change callbacks if needed\n\n\n      _this.updateState(_this.computeState(), _this.p.props, e);\n    };\n\n    _this.handleNotifyOfNext = function (e) {\n      var updateState = false;\n\n      switch (e.type) {\n        case 'scroll':\n        case 'mouseenter':\n        case 'mutation':\n          // check mouse position, if it's still on RI, then reNotifyOfNext, else updateState\n          if (_this.track.mouseOn && _this.checkMousePosition() === 'mouseOn') {\n            return 'reNotifyOfNext';\n          }\n\n          _this.track.mouseOn = false;\n          _this.track.buttonDown = false;\n          updateState = true;\n          break;\n\n        case 'touchstart':\n          // cancel tap if extra touch point, or when touch someplace else on the screen\n          // check topNode and children to make sure they weren't the target\n          if (_this.p.props.extraTouchNoTap) {\n            if (_this.track.touches.active < _this.maxTapPoints && (0, _recursiveNodeCheck2.default)(_this.topNode, function (node) {\n              return e.target === node;\n            })) {\n              return 'reNotifyOfNext';\n            }\n\n            updateState = _this.handleTouchEvent({\n              type: 'touchtapcancel'\n            }) === 'updateState';\n          }\n\n          break;\n\n        case 'dragstart':\n          // use setTimeout because notifier drag event will fire before the drag event on RI,\n          // so w/o timeout when this intance of RI is dragged it would go:\n          // active -> force normal from notifier drag -> active from RI's drag event,\n          // but the timeout will allow time for RI's drag event to fire before force normal\n          _this.manageSetTimeout('dragstart', function () {\n            if (!_this.track.drag) {\n              _this.forceTrackIState('normal');\n\n              _this.updateState(_this.computeState(), _this.p.props, e, true);\n            }\n          }, 30);\n\n          break;\n        // window focus event\n\n        case 'focus':\n          // reinstate previous focus state if this window focus event is followed by\n          // an element focus event, otherwise cancel focus reinstatement\n          if (_this.track.previousFocus !== false) {\n            _this.track.reinstateFocus = true;\n\n            _this.manageSetTimeout('windowFocus', function () {\n              _this.track.reinstateFocus = false;\n            }, _constants.queueTime);\n          }\n\n          break;\n        // window blur event to preserve the focus state\n\n        case 'blur':\n          // clear the timer set in manageNotifyOfNext that was set to cancel this notification\n          _this.cancelTimeout('elementBlur'); // notifiy of the next window focus event (re-entering the app/window/tab)\n\n\n          if (!_this.track.notifyOfNext.focus) {\n            _this.track.notifyOfNext.focus = (0, _notifier.notifyOfNext)('focus', _this.handleNotifyOfNext);\n          }\n\n          break;\n\n        default:\n      }\n\n      if (updateState) _this.updateState(_this.computeState(), _this.p.props, e, true);\n      delete _this.track.notifyOfNext[e.type];\n      return null;\n    };\n\n    _this.state = {\n      // iState is always 1 of 5 strings:\n      // 'normal', 'hover', 'hoverActive', 'touchActive', 'keyActive'\n      iState: 'normal',\n      // focus is always 1 of 4 values: false, 'tab', 'mouse' or 'touch'\n      focus: false\n    }; // things to keep track of so RI knows what to do when\n\n    _this.track = {\n      touchDown: false,\n      recentTouch: false,\n      touches: {\n        points: {},\n        active: 0\n      },\n      mouseOn: false,\n      buttonDown: false,\n      clickType: 'reset',\n      focus: false,\n      previousFocus: false,\n      reinstateFocus: false,\n      focusTransition: 'reset',\n      focusStateOnMouseDown: false,\n      spaceKeyDown: false,\n      enterKeyDown: false,\n      drag: false,\n      updateTopNode: false,\n      notifyOfNext: {},\n      timeoutIDs: {},\n      state: _this.state\n    }; // the node returned by the ref callback\n\n    _this.refNode = null; // the actual top DOM node of `as`, needed when `as` is wrapped in a span (is ReactComponent)\n\n    _this.topNode = null; // tagName and type properties of topNode, updated in refCallback\n\n    _this.tagName = typeof props.as === 'string' && props.as || '';\n    _this.type = props.type || ''; // if the topNode is triggered by the enter key, and/or the space bar\n\n    _this.enterKeyTrigger = false;\n    _this.spaceKeyTrigger = false; // maximum number of touch points where a tap is still possible, updated in propsSetup\n\n    _this.maxTapPoints = 1; // the event handlers to pass down as props to the element/component\n\n    _this.eventHandlers = _this.setupEventHandlers(); // this.p is used to store things that are a deterministic function of props\n    // to avoid recalculating every time they are needed, it can be thought of as a pure\n    // extension to props and is only updated in the constructor and componentWillReceiveProps\n\n    _this.p = {\n      sameProps: false\n    }; // set properties of `this.p`\n\n    _this.propsSetup(props); // if initialState prop, update state.iState for initial render, note that state.focus\n    // will be updated in componentDidMount b/c can't call focus until have ref to DOM node\n\n\n    if (_this.p.props.initialState && _this.p.props.initialState.iState) {\n      _this.forceTrackIState(_this.p.props.initialState.iState);\n\n      _this.state = _this.computeState();\n    }\n\n    return _this;\n  }\n\n  _createClass(Interactive, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // enter focus state if initialState.focus - called here instead of constructor\n      // because can't call focus until have ref to DOM node\n      if (this.p.props.initialState && this.p.props.initialState.focus !== undefined) {\n        this.forceState({\n          focus: this.p.props.initialState.focus\n        });\n      }\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // set if the `topNode` needs to be updated in componentDidUpdate => `as` is different\n      // and not a string, note that if `as` is a new string, then the `refCallback`\n      // will be called by React so no need to do anything in componentDidUpdate\n      this.track.updateTopNode = this.props.as !== nextProps.as && typeof this.props.as !== 'string' && typeof nextProps.as !== 'string'; // check if nextProps are the same as this.props\n\n      this.p.sameProps = false;\n\n      if (!nextProps.mutableProps && (0, _compareProps2.default)(this.props, nextProps)) {\n        this.p.sameProps = true;\n      } else {\n        // if not same props, do props setup => set properties of `this.p`\n        this.propsSetup(nextProps);\n      } // if `forceState` prop, then force update state\n\n\n      if (this.p.props.forceState) this.forceState(this.p.props.forceState);\n    }\n  }, {\n    key: 'shouldComponentUpdate',\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      // or statement, returns true on first true value, returns false if all are false\n      return (// return true if props have changed since last render\n        !this.p.sameProps && nextProps !== this.props || // always update if there are interactive children\n        nextProps.interactiveChild || // if `iState` changed, AND the `style` or `className` for the new `iState` is different,\n        // prevents renders when switching b/t two states that have the same `style` and `className`\n        nextState.iState !== this.state.iState && (this.p[nextState.iState + 'Style'].style !== this.p[this.state.iState + 'Style'].style || this.p[nextState.iState + 'Style'].className !== this.p[this.state.iState + 'Style'].className) || // if `focus` state changed (always update to work with default style)\n        nextState.focus !== this.state.focus\n      );\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate() {\n      // `refCallback` isn't called by React when `as` is a component because the span wrapper\n      // remains the same element and is not re-mounted in the DOM, so need to call refCallback here\n      // if `as` is new and a component (`updateTopNode` was set in componentWillReceiveProps).\n      if (this.track.updateTopNode) {\n        this.track.updateTopNode = false;\n        this.refCallback(this.refNode);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      var _this2 = this;\n\n      Object.keys(this.track.notifyOfNext).forEach(function (eType) {\n        (0, _notifier.cancelNotifyOfNext)(eType, _this2.track.notifyOfNext[eType]);\n      });\n      Object.keys(this.track.timeoutIDs).forEach(function (timer) {\n        window.clearTimeout(_this2.track.timeoutIDs[timer]);\n      });\n    } // determine event handlers to use based on the device type - only determined once in constructor\n\n  }, {\n    key: 'setupEventHandlers',\n    value: function setupEventHandlers() {\n      var _this3 = this;\n\n      var eventHandlers = {};\n      Object.keys(_constants.otherEvents).forEach(function (event) {\n        eventHandlers[_constants.otherEvents[event]] = _this3.handleEvent;\n      }); // if the device has touch, set touch event listeners\n\n      if (_constants.deviceHasTouch) {\n        Object.keys(_constants.touchEvents).forEach(function (event) {\n          eventHandlers[_constants.touchEvents[event]] = _this3.handleEvent;\n        });\n      } // if the device has a mouse, set mouse event listeners\n\n\n      if (_constants.deviceHasMouse) {\n        Object.keys(_constants.mouseEvents).forEach(function (event) {\n          eventHandlers[_constants.mouseEvents[event]] = _this3.handleEvent;\n        });\n      }\n\n      return eventHandlers;\n    } // returns true if a click listener should be set, called from propsSetup and refCallback\n\n  }, {\n    key: 'setClickListener',\n    value: function setClickListener(props) {\n      // set click listener when there is an onClick prop\n      if (props.onClick) return true;\n\n      if (_constants.deviceHasTouch) {\n        // set click listener when the element is focusable - this is to correct a bug\n        // in Chrome on iOS where it will sometimes, when it is under stress, fire focus and\n        // click events without firing a touch event on the document - the result is the focus event\n        // will cause RI to enter the focus from tab state errantly, and then the click event will\n        // toggle focus off making the correction, so have to listen for click events\n        if (props.tabIndex) return true; // set click listener when the element has a knownRoleTag, i.e. the browser\n        // has a click event handler so preventDefault() needs to be called when the\n        // browser sends a click event after RI has canceled tap (e.g. touchTapTimer expired, etc)\n\n        if (_constants.knownRoleTags[this.tagName]) return true;\n      }\n\n      return false;\n    } // find and set the top DOM node of `as`\n\n  }, {\n    key: 'propsSetup',\n    // setup `this.p`, only called from constructor and componentWillReceiveProps\n    value: function propsSetup(props) {\n      var _mergeAndExtractProps = (0, _mergeAndExtractProps3.default)(props, _constants.knownProps),\n          mergedProps = _mergeAndExtractProps.mergedProps,\n          passThroughProps = _mergeAndExtractProps.passThroughProps;\n\n      (0, _extractStyle.setActiveAndFocusProps)(mergedProps); // if focus state prop and no tabIndex, then add a tabIndex so RI is focusable by browser\n\n      if (passThroughProps.tabIndex === null) delete passThroughProps.tabIndex;else if (!passThroughProps.tabIndex && (mergedProps.focus || mergedProps.focusFromTab || mergedProps.focusFromMouse || mergedProps.focusFromTouch || mergedProps.onClick)) {\n        mergedProps.tabIndex = '0';\n        passThroughProps.tabIndex = '0';\n      } // if onClick prop but it's not clear what the role of the element is then add role=\"button\"\n\n      if (passThroughProps.role === null) delete passThroughProps.role;else if (mergedProps.onClick && !mergedProps.role && typeof mergedProps.as === 'string' && !_constants.knownRoleTags[mergedProps.as]) {\n        mergedProps.role = 'button';\n        passThroughProps.role = 'button';\n      } // maximum number of touch points where a tap is still possible\n\n      this.maxTapPoints = mergedProps.onTapFour && 4 || mergedProps.onTapThree && 3 || mergedProps.onTapTwo && 2 || 1; // add onClick handler to passThroughProps if it's required\n\n      if (this.setClickListener(mergedProps)) passThroughProps.onClick = this.handleEvent; //  add onTouchMove handler to passThroughProps if it's required\n\n      if (_constants.deviceHasTouch && (mergedProps.touchActiveTapOnly || mergedProps.onLongPress || mergedProps.onTouchMove)) {\n        passThroughProps.onTouchMove = this.handleEvent;\n      } // add other event handlers to passThroughProps\n\n\n      (0, _objectAssign2.default)(passThroughProps, this.eventHandlers);\n      this.p.normalStyle = (0, _extractStyle.extractStyle)(mergedProps, 'normal');\n      this.p.hoverStyle = (0, _extractStyle.extractStyle)(mergedProps, 'hover');\n      this.p.hoverActiveStyle = (0, _extractStyle.extractStyle)(mergedProps, 'hoverActive');\n      this.p.touchActiveStyle = (0, _extractStyle.extractStyle)(mergedProps, 'touchActive');\n      this.p.keyActiveStyle = (0, _extractStyle.extractStyle)(mergedProps, 'keyActive');\n      this.p.tabFocusStyle = (0, _extractStyle.extractStyle)(mergedProps, 'focusFromTab');\n      this.p.mouseFocusStyle = (0, _extractStyle.extractStyle)(mergedProps, 'focusFromMouse');\n      this.p.touchFocusStyle = (0, _extractStyle.extractStyle)(mergedProps, 'focusFromTouch');\n      this.p.passThroughProps = passThroughProps;\n      this.p.props = mergedProps;\n    } // keep track of running timeouts so can clear in componentWillUnmount\n\n  }, {\n    key: 'manageSetTimeout',\n    value: function manageSetTimeout(type, cb, delay) {\n      var _this4 = this;\n\n      if (this.track.timeoutIDs[type] !== undefined) {\n        window.clearTimeout(this.track.timeoutIDs[type]);\n      }\n\n      this.track.timeoutIDs[type] = window.setTimeout(function () {\n        delete _this4.track.timeoutIDs[type];\n        cb();\n      }, delay);\n    }\n  }, {\n    key: 'cancelTimeout',\n    value: function cancelTimeout(type) {\n      if (this.track.timeoutIDs[type] !== undefined) {\n        window.clearTimeout(this.track.timeoutIDs[type]);\n        delete this.track.timeoutIDs[type];\n      }\n    } // force set this.track properties based on iState\n\n  }, {\n    key: 'forceTrackIState',\n    value: function forceTrackIState(iState) {\n      if (this.computeState().iState !== iState) {\n        this.track.mouseOn = iState === 'hover' || iState === 'hoverActive';\n        this.track.buttonDown = iState === 'hoverActive';\n        this.track.touchDown = iState === 'touchActive';\n        this.track.spaceKeyDown = iState === 'keyActive';\n        this.track.enterKeyDown = iState === 'keyActive';\n        this.track.drag = false;\n      }\n    } // force set new state\n\n  }, {\n    key: 'forceState',\n    value: function forceState(newState) {\n      // set this.track properties to match new iState\n      if (newState.iState !== undefined) this.forceTrackIState(newState.iState); // if new focus state, call manageFocus and return b/c focus calls updateState\n\n      if (newState.focus !== undefined && newState.focus !== this.track.state.focus) {\n        this.track.focus = newState.focus;\n        this.manageFocus(newState.focus ? 'forceStateFocusTrue' : 'forceStateFocusFalse');\n        return;\n      } // update state with new computed state and dummy 'event' that caused state change\n\n\n      this.updateState(this.computeState(), this.p.props, (0, _constants.dummyEvent)('forcestate'));\n    } // compute the state based on what's set in `this.track`, returns a new state object\n    // note: use the respective active state when drag is true (i.e. dragging the element)\n\n  }, {\n    key: 'computeState',\n    value: function computeState() {\n      var _track = this.track,\n          mouseOn = _track.mouseOn,\n          buttonDown = _track.buttonDown,\n          touchDown = _track.touchDown,\n          focus = _track.focus,\n          drag = _track.drag;\n      var focusKeyDown = focus && (this.track.enterKeyDown && this.enterKeyTrigger || this.track.spaceKeyDown && this.spaceKeyTrigger);\n      var newState = {\n        focus: focus\n      };\n      if (!mouseOn && !buttonDown && !touchDown && !focusKeyDown && !drag) newState.iState = 'normal';else if (mouseOn && !buttonDown && !touchDown && !focusKeyDown && !drag) {\n        newState.iState = 'hover';\n      } else if (mouseOn && buttonDown && !touchDown && !focusKeyDown || drag && !touchDown) {\n        newState.iState = 'hoverActive';\n      } else if (focusKeyDown && !touchDown) newState.iState = 'keyActive';else if (touchDown || drag) newState.iState = 'touchActive';\n      return newState;\n    } // takes a new state, calls setState and the state change callbacks\n\n  }, {\n    key: 'updateState',\n    value: function updateState(newState, props, event, dontManageNotifyOfNext) {\n      if (!dontManageNotifyOfNext) this.manageNotifyOfNext(newState);\n      var prevIState = this.track.state.iState;\n      var nextIState = newState.iState;\n      var iStateChange = nextIState !== prevIState;\n      var focusChange = newState.focus !== this.track.state.focus; // early return if state doesn't need to change\n\n      if (!iStateChange && !focusChange) return; // create new prev and next state objects with immutable values\n\n      var prevState = {\n        iState: prevIState,\n        focus: this.track.state.focus\n      };\n      var nextState = {\n        iState: nextIState,\n        focus: newState.focus\n      }; // call onStateChange prop callback\n\n      props.onStateChange && props.onStateChange({\n        prevState: prevState,\n        nextState: nextState,\n        event: event\n      }); // track new state because setState is asyncrounous\n\n      this.track.state = newState; // only place that setState is called\n\n      this.setState(newState, props.setStateCallback && props.setStateCallback.bind(this, {\n        prevState: prevState,\n        nextState: nextState\n      }));\n    } // handles all events - first checks if it's a valid event, then calls the specific\n    // type of event handler (to set the proper this.track properties),\n    // and at the end calls this.updateState(...)\n\n  }, {\n    key: 'isValidEvent',\n    // checks if the event is a valid event or not, returns true / false respectivly\n    value: function isValidEvent(e) {\n      // if it's a known click event then return true\n      if (e.type === 'click' && this.track.clickType !== 'reset') return true; // if it's a focus/blur event and this Interactive instance is not the target then return true\n\n      if ((e.type === 'focus' || e.type === 'blur') && e.target !== this.topNode) return true; // refCallbackFocus calls focus when there is a new top DOM node and RI is already in the\n      // focus state to keep the browser's focus state in sync with RI's, so reset and return false\n\n      if (e.type === 'focus' && this.track.focusTransition === 'refCallbackFocus') {\n        e.stopPropagation();\n        this.track.focusTransition = 'reset';\n        return false;\n      } // if the focusTransition is a force blur and RI is not currently in the focus state,\n      // then the force blur is to keep the browser focus state in sync with RI's focus state,\n      // so reset the focusTransition and return false, no need to do anything\n      // else because the blur event was only for the benefit of the browser, not RI\n\n\n      if (e.type === 'blur' && this.track.focusTransition === 'focusForceBlur' && !this.track.state.focus) {\n        e.stopPropagation();\n        this.track.focusTransition = 'reset';\n        return false;\n      } // if the device is touchOnly or a hybrid\n\n\n      if (_constants.deviceHasTouch) {\n        // reject click events that are from touch interactions, unless no active or touchActive prop\n        // if no active or touchActive prop, then let the browser determine what is a click from touch\n        // this allows for edge taps that don't fire touch events on RI (only click events)\n        // so the click event is allowed through when WebkitTapHightlightColor indicates a click\n        if (e.type === 'click' && (_inputTracker2.default.touch.recentTouch || _inputTracker2.default.touch.touchOnScreen) && (this.p.props.active || this.p.props.touchActive)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        } // reject unknown focus events from touch interactions\n\n\n        if (e.type === 'focus') {\n          if (this.track.focusTransition === 'reset' && (_inputTracker2.default.touch.recentTouch || !this.track.touchDown && _inputTracker2.default.touch.touchOnScreen)) {\n            e.preventDefault();\n            e.stopPropagation();\n            this.manageFocus('focusForceBlur');\n            return false;\n          }\n        }\n      }\n\n      if (_constants.deviceType === 'hybrid') {\n        // reject mouse events from touch interactions\n        if (/mouse/.test(e.type) && (_inputTracker2.default.touch.touchOnScreen || _inputTracker2.default.touch.recentTouch)) {\n          e.preventDefault();\n          e.stopPropagation();\n          return false;\n        }\n      }\n\n      return true;\n    } // notifyOfNext plugs the holes in the events fired by the browser on the RI element,\n    // in some situations the browser fails to fire the necessary event leaving RI stuck\n    // in the wrong state (a not normal iState), so sign up to be notified of the next global event\n    // and do some checks (in handleNotifyOfNext) to confirm RI is in the correct state,\n    // note that notifyOfNext only while not in the normal state makes the notifier O(1) instead of\n    // O(n), where n is the number of mounted RI components\n\n  }, {\n    key: 'manageNotifyOfNext',\n    value: function manageNotifyOfNext(newState) {\n      var _this5 = this; // set notifyOfNext\n\n\n      var setNON = function setNON(eType) {\n        if (!_this5.track.notifyOfNext[eType]) {\n          _this5.track.notifyOfNext[eType] = (0, _notifier.notifyOfNext)(eType, _this5.handleNotifyOfNext);\n        }\n      }; // cancel notifyOfNext\n\n\n      var cancelNON = function cancelNON(eType) {\n        if (_this5.track.notifyOfNext[eType]) {\n          (0, _notifier.cancelNotifyOfNext)(eType, _this5.track.notifyOfNext[eType]);\n          delete _this5.track.notifyOfNext[eType];\n        }\n      };\n\n      if (_constants.deviceHasMouse) {\n        // if not in the normal state and not dragging, then set notifyOfNext, otherwise cancel\n        var shouldSetNON = newState.iState !== 'normal' && !this.track.drag; // check mouse position on document mouseenter to prevent from sticking in\n        // the hover state after switching to another app/window, moving the mouse,\n        // and then switching  back (so the mouse is no longer over the element)\n\n        shouldSetNON ? setNON('mouseenter') : cancelNON('mouseenter'); // the dragstart event on an element fires after a short delay, so it is possible to\n        // start dragging an element and have the mouseenter another element putting it in the\n        // hoverActive state before the dragstart event fires (after the dragstart event\n        // no other mouse events are fired), so sign up for next global dragstart to force intro\n        // normal state while another element is being dragged\n\n        shouldSetNON ? setNON('dragstart') : cancelNON('dragstart'); // the scroll listener provides a minor improvement to accuracy by exiting the hover state\n        // as soon as the mouse is scrolled off an element instead of waiting for the scrolling to end\n        // only set as a passive listener as the improvement is not worth it if it hurts performance\n\n        if (_constants.passiveEventSupport) {\n          shouldSetNON ? setNON('scroll') : cancelNON('scroll');\n        } // if the mouse is on RI, then sign up for next DOM mutation event, which could\n        // move the mouse off of RI (by changing the layout of the page)\n        // without firing a mouseleave event (because the mouse never moved)\n\n\n        this.track.mouseOn ? setNON('mutation') : cancelNON('mutation');\n      }\n\n      if (_constants.deviceHasTouch) {\n        // cancel tap when touch someplace else on the screen\n        newState.iState === 'touchActive' ? this.p.props.extraTouchNoTap && setNON('touchstart') : cancelNON('touchstart');\n      } // notify of next setup for maintaining correct focusFrom when switching apps/windows,\n      // if exiting the focus state, notify of the next window blur (leaving the app/window/tab)\n      // event if it immediately follows this event, otherwise cancel the notify of next\n\n\n      if (this.track.state.focus && !newState.focus) {\n        setNON('blur');\n        this.manageSetTimeout('elementBlur', function () {\n          _this5.track.previousFocus = false;\n          cancelNON('blur');\n        }, _constants.queueTime);\n      }\n    }\n  }, {\n    key: 'checkMousePosition',\n    // check the mouse position relative to the RI element on the page\n    value: function checkMousePosition(e) {\n      if (!_constants.deviceHasMouse) return null;\n      var mouseX = e && e.clientX || _inputTracker2.default.mouse.clientX;\n      var mouseY = e && e.clientY || _inputTracker2.default.mouse.clientY;\n\n      function mouseOnNode(node) {\n        var rect = node.getBoundingClientRect();\n        return mouseX >= rect.left - 1 && mouseX <= rect.right + 1 && mouseY >= rect.top - 1 && mouseY <= rect.bottom + 1;\n      }\n\n      var mouseOn = true;\n\n      if (!_inputTracker2.default.mouse.mouseOnDocument) {\n        mouseOn = false;\n      } else if (!this.p.props.nonContainedChild) {\n        mouseOn = mouseOnNode(this.topNode);\n      } else {\n        // if the nonContainedChild prop is present, then do a recursive check of the node and its\n        // children until the mouse is on a node or all children are checked,\n        // this is useful when the children aren't inside of the parent on the page\n        mouseOn = (0, _recursiveNodeCheck2.default)(this.topNode, mouseOnNode);\n      }\n\n      return mouseOn ? 'mouseOn' : 'mouseOff';\n    } // check to see if a focusTransition is necessary and update this.track.focusTransition\n    // returns 'terminate' if handleEvent should terminate, returns 'updateState'\n    // if handleEvent should continue and call updateState this time through\n    // focus event lifecycle:\n    // - browser calls focus -> onFocus listener triggered\n    // - RI calls focus (using manageFocus) -> set focusTransition -> onFocus listener triggered\n    // - RI event handler uses track.focusTransition to determine if the focus event is:\n    //   - not a valid event (in isValidEvent)\n    //     - sent from RI to keep browser focus in sync with RI -> reset focusTransition -> end\n    //     - errant -> call blur to keep browser in sync, set focusTransition to focusForceBlur -> end\n    //   - a valid event\n    //     - sent from RI -> reset focusTransition -> RI enters the focus state w/ focus\n    //       based on the focusTransition\n    //     - sent from browser -> RI enters the focus state w/ focus set to 'tab'\n    // - browser calls blur -> onBlur listener triggered\n    // - RI calls blur (using manageFocus) -> set focusTransition -> onBlur listener triggered\n    // - RI event handler uses track.focusTransition to determine if the blur event is:\n    //   - not a valid event (in isValidEvent)\n    //     - a force blur to keep the browser focus state in sync -> reset focusTransition -> end\n    //       (if it's a force blur meant for both RI and the browser, then it's a valid event)\n    //   - eveything else -> reset focusTransition -> RI leaves focus state\n\n  }, {\n    key: 'manageFocus',\n    value: function manageFocus(type, e) {\n      var _this6 = this; // if this exact event has already been used for focus/blur by another instance of Interactive\n      // i.e. a child and the event is bubbling, then don't manage focus and return updateState\n\n\n      if (e && (_inputTracker.focusRegistry.focus === e || _inputTracker.focusRegistry.blur === e)) return 'updateState'; // is the DOM node tag blurable for toggle focus\n\n      var tagIsBlurable = !_constants.nonBlurrableTags[this.tagName] && !this.p.props.focusToggleOff; // is the node focusable, if there is a focus or tabIndex prop, or it's non-blurable, then it is\n\n      var tagIsFocusable = this.p.props.tabIndex || _constants.knownRoleTags[this.tagName]; // calls focus/blur to transition focus, returns 'terminate' if focus/blur call is made\n      // because focus/blur event handler called updateState,\n      // returns 'updateState' if not allowed to make specified transition, so RI will continue\n      // to updateState this time through handleEvent\n\n      var focusTransition = function focusTransition(event, transitionAs, force) {\n        if (force === 'force' || event === 'focus' && tagIsFocusable || event === 'blur' && tagIsBlurable) {\n          // if the manageFocus call is from a browser event (i.e. will bubble), register it\n          if (e) {\n            _inputTracker.focusRegistry[event] = e; // reset event registry after bubbling has finished because React reuses events so\n            // future event equality checks may give a false positive if not reset\n\n            _this6.manageSetTimeout('focusRegistry', function () {\n              _inputTracker.focusRegistry[event] = null;\n            }, 0);\n          }\n\n          _this6.track.focusTransition = transitionAs;\n\n          _this6.topNode[event](); // if focusTransition has changed, then the focus/blur call was sucessful so terminate\n\n\n          if (_this6.track.focusTransition !== transitionAs) {\n            return 'terminate';\n          }\n        }\n\n        _this6.track.focusTransition = 'reset';\n        return 'updateState';\n      }; // toggles focus by calling focusTransition, returns focusTransition's return\n\n\n      var toggleFocus = function toggleFocus(toggleAs, force) {\n        if (_this6.track.state.focus) return focusTransition('blur', toggleAs + 'Blur', force);\n        return focusTransition('focus', toggleAs + 'Focus', force);\n      };\n\n      switch (type) {\n        case 'mousedown':\n          return focusTransition('focus', 'mouseDownFocus');\n\n        case 'mouseup':\n          // blur only if focus was not initiated on the preceding mousedown,\n          if (this.track.focusStateOnMouseDown) return focusTransition('blur', 'mouseUpBlur');\n          this.track.focusTransition = 'reset';\n          return 'updateState';\n\n        case 'touchclick':\n          return toggleFocus('touchClick');\n\n        case 'forceStateFocusTrue':\n          // setTimeout because React misses focus calls made during componentWillReceiveProps,\n          // which is where forceState calls come from (the browser receives the focus call\n          // but not React), so have to call focus asyncrounsly so React receives it\n          this.manageSetTimeout('forceStateFocusTrue', function () {\n            !_this6.track.state.focus && focusTransition('focus', 'forceStateFocus', 'force');\n          }, 0);\n          return 'terminate';\n\n        case 'forceStateFocusFalse':\n          // same as forceStateFocusTrue, but for focus false\n          this.manageSetTimeout('forceStateFocusFalse', function () {\n            _this6.track.state.focus && focusTransition('blur', 'forceStateBlur', 'force');\n          }, 0);\n          return 'terminate';\n\n        case 'refCallback':\n          // if in the focus state and RI has a new topDOMNode, then call focus() on `this.topNode`\n          // to keep the browser focus state in sync with RI's focus state\n          if (this.track.state.focus) return focusTransition('focus', 'refCallbackFocus', 'force');\n          this.track.focusTransition = 'reset';\n          return 'terminate';\n\n        case 'focusForceBlur':\n          return focusTransition('blur', 'focusForceBlur', 'force');\n\n        default:\n          return 'updateState';\n      }\n    } // returns 'terminate' if the caller (this.handleEvent) should not call updateState(...)\n\n  }, {\n    key: 'handleMouseEvent',\n    value: function handleMouseEvent(e) {\n      switch (e.type) {\n        case 'mouseenter':\n          (0, _inputTracker.updateMouseFromRI)(e);\n          this.p.props.onMouseEnter && this.p.props.onMouseEnter(e);\n          this.track.mouseOn = true;\n          this.track.buttonDown = e.buttons === 1;\n          return 'updateState';\n\n        case 'mouseleave':\n          (0, _inputTracker.updateMouseFromRI)(e);\n          this.p.props.onMouseLeave && this.p.props.onMouseLeave(e);\n          this.track.mouseOn = false;\n          this.track.buttonDown = false;\n          return 'updateState';\n\n        case 'mousemove':\n          this.p.props.onMouseMove && this.p.props.onMouseMove(e); // early return for mouse move\n\n          if (this.track.mouseOn && this.track.buttonDown === (e.buttons === 1)) return 'terminate';\n          this.track.mouseOn = true;\n          this.track.buttonDown = e.buttons === 1;\n          return 'updateState';\n\n        case 'mousedown':\n          this.p.props.onMouseDown && this.p.props.onMouseDown(e);\n          this.track.mouseOn = true;\n          this.track.buttonDown = true; // track focus state on mousedown to know if should blur on mouseup\n\n          this.track.focusStateOnMouseDown = this.track.state.focus;\n          return this.manageFocus('mousedown', e);\n\n        case 'mouseup':\n          {\n            this.p.props.onMouseUp && this.p.props.onMouseUp(e);\n            this.track.buttonDown = false;\n            var manageFocusReturn = this.manageFocus('mouseup', e);\n            this.manageClick('mouseClick');\n            return manageFocusReturn;\n          }\n\n        default:\n          return 'terminate';\n      }\n    } // returns 'terminate' if the caller (this.handleEvent) should not call updateState(...)\n    // note that a touch interaction lasts from the start of the first touch point on RI,\n    // until removal of the last touch point on RI, and then the touch interaction is reset\n\n  }, {\n    key: 'handleTouchEvent',\n    value: function handleTouchEvent(e) {\n      var _this7 = this; // reset mouse trackers\n\n\n      this.track.mouseOn = false;\n      this.track.buttonDown = false; // reset touch interaction tracking, called when there are no more touches on the target\n\n      var resetTouchInteraction = function resetTouchInteraction() {\n        _this7.track.touchDown = false;\n        _this7.track.touches = {\n          points: {},\n          active: 0\n        }; // clear the touchTapTimer if it's running\n\n        _this7.cancelTimeout('touchTapTimer');\n      }; // track recent touch, called from touchend and touchcancel\n\n\n      var recentTouch = function recentTouch() {\n        _this7.track.recentTouch = true;\n\n        _this7.manageSetTimeout('recentTouchTimer', function () {\n          _this7.track.recentTouch = false;\n        }, _constants.queueTime);\n      }; // returns true if there are extra touches on the screen\n\n\n      var extraTouches = function extraTouches() {\n        return (// if extraTouchNoTap prop and also touching someplace else on the screen, or\n          _this7.p.props.extraTouchNoTap && e.touches.length !== _this7.track.touches.active || // more touches on RI than maxTapPoints\n          _this7.track.touches.active > _this7.maxTapPoints\n        );\n      }; // returns true if a touch point has moved more than is allowed for a tap\n\n\n      var touchMoved = function touchMoved(endTouch, startTouch, numberOfPoints) {\n        return Math.abs(endTouch.clientX - startTouch.startX) >= 15 + 3 * numberOfPoints || Math.abs(endTouch.clientY - startTouch.startY) >= 15 + 3 * numberOfPoints;\n      }; // log touch position for each touch point that is part of the touch event\n\n\n      var logTouchCoordsAs = function logTouchCoordsAs(logAs) {\n        for (var i = 0; i < e.changedTouches.length; i++) {\n          var point = _this7.track.touches.points[e.changedTouches[i].identifier] || {};\n          point[logAs + 'X'] = e.changedTouches[i].clientX;\n          point[logAs + 'Y'] = e.changedTouches[i].clientY;\n          _this7.track.touches.points[e.changedTouches[i].identifier] = point;\n        }\n      };\n\n      switch (e.type) {\n        case 'touchstart':\n          {\n            this.p.props.onTouchStart && this.p.props.onTouchStart(e); // update number of active touches\n\n            this.track.touches.active += e.changedTouches.length;\n            if (this.track.touches.tapCanceled) return 'terminate';\n            var newTouchDown = !this.track.touchDown;\n            this.track.touchDown = true; // cancel tap if there was already a touchend in this interaction or there are extra touches\n\n            if (this.track.touches.touchend || extraTouches()) {\n              // recursively call handleTouchEvent with a touchtapcancel event to set track properties,\n              // call handleTouchEvent directly don't go through handleEvent so updateState isn't called\n              return this.handleTouchEvent({\n                type: 'touchtapcancel'\n              }) === 'updateState' || newTouchDown ? 'updateState' : 'terminate';\n            } // if going from no touch to touch, set touchTapTimer\n\n\n            if (newTouchDown) {\n              e.persist();\n              this.manageSetTimeout('touchTapTimer', function () {\n                // if the timer finishes then call onLongPress callback and\n                // fire a touchtapcancel event to cancel the tap,\n                // because this goes through handleEvent, updateState will be called if needed\n                _this7.p.props.onLongPress && _this7.p.props.onLongPress(e);\n\n                _this7.handleEvent((0, _constants.dummyEvent)('touchtapcancel'));\n              }, this.p.props.tapTimeCutoff);\n            } // log touch start position\n\n\n            logTouchCoordsAs('start');\n            return 'updateState';\n          }\n\n        case 'touchmove':\n          this.p.props.onTouchMove && this.p.props.onTouchMove(e);\n          if (this.track.touches.tapCanceled) return 'terminate'; // cancel tap if there are extra touches\n\n          if (extraTouches()) return this.handleTouchEvent({\n            type: 'touchtapcancel'\n          }); // if touchActiveTapOnly or onLongPress prop,\n          // check to see if the touch moved enough to cancel tap\n\n          if (this.p.props.touchActiveTapOnly || this.p.props.onLongPress) {\n            for (var i = 0; i < e.changedTouches.length; i++) {\n              var touch = this.track.touches.points[e.changedTouches[i].identifier];\n\n              if (touch && touchMoved(e.changedTouches[i], touch, this.maxTapPoints)) {\n                return this.handleTouchEvent({\n                  type: 'touchtapcancel'\n                });\n              }\n            }\n          }\n\n          return 'terminate';\n\n        case 'touchend':\n          // start recent touch timer\n          recentTouch();\n          this.p.props.onTouchEnd && this.p.props.onTouchEnd(e); // update number of active touches\n\n          this.track.touches.active -= e.changedTouches.length; // if a touch event was dropped somewhere, i.e.\n          // cumulative length of changed touches for touchstarts !== touchends, then reset\n\n          if (this.track.touches.active < 0 || e.touches.length === 0 && this.track.touches.active > 0) {\n            resetTouchInteraction();\n            return 'updateState';\n          } // track that there has been a touchend in this touch interaction\n\n\n          this.track.touches.touchend = true; // check to see if tap is already canceled or should be canceled\n\n          if (this.track.touches.active === 0 && (this.track.touches.tapCanceled || extraTouches())) {\n            resetTouchInteraction();\n            return 'updateState';\n          } else if (this.track.touches.tapCanceled) return 'terminate';else if (extraTouches()) return this.handleTouchEvent({\n            type: 'touchtapcancel'\n          }); // log touch end position\n\n\n          logTouchCoordsAs('client'); // if there are no remaining touches, then process the touch interaction\n\n          if (this.track.touches.active === 0) {\n            var touches = this.track.touches.points;\n            var touchKeys = Object.keys(touches);\n            var count = touchKeys.length; // determine if there was a tap and number of touch points for the tap\n            // if every touch point hasn't moved, set tapTouchPoints to count\n\n            var tapTouchPoints = touchKeys.every(function (touch) {\n              return !touchMoved(touches[touch], touches[touch], count);\n            }) ? count : 0; // reset the touch interaction\n\n            resetTouchInteraction();\n\n            switch (tapTouchPoints) {\n              case 1:\n                {\n                  var manageFocusReturn = 'updateState'; // if no active or touchActive prop, let the browser handle click events\n\n                  if (this.p.props.active || this.p.props.touchActive) {\n                    manageFocusReturn = this.manageFocus('touchclick', e);\n                    this.manageClick('tapClick');\n                  }\n\n                  return manageFocusReturn;\n                }\n\n              case 2:\n                this.p.props.onTapTwo && this.p.props.onTapTwo(e);\n                break;\n\n              case 3:\n                this.p.props.onTapThree && this.p.props.onTapThree(e);\n                break;\n\n              case 4:\n                this.p.props.onTapFour && this.p.props.onTapFour(e);\n                break;\n\n              default:\n            }\n          }\n\n          return 'updateState';\n\n        case 'touchcancel':\n          recentTouch();\n          this.p.props.onTouchCancel && this.p.props.onTouchCancel(e);\n          this.track.touches.active -= e.changedTouches.length; // if there are no remaining touches, then reset the touch interaction\n\n          if (this.track.touches.active === 0) {\n            resetTouchInteraction();\n            return 'updateState';\n          } // cancel tap and return whatever touchtapcancel says todo\n\n\n          return this.handleTouchEvent({\n            type: 'touchtapcancel'\n          });\n        // cancel tap for this touch interaction\n\n        case 'touchtapcancel':\n          // clear the touchTapTimer if it's running\n          this.cancelTimeout('touchTapTimer');\n\n          if (this.track.touchDown) {\n            // set the tap event to canceled\n            this.track.touches.tapCanceled = true;\n\n            if (this.p.props.touchActiveTapOnly) {\n              // if touchActiveTapOnly prop, exit the touchActive state and updateState\n              this.track.touchDown = false;\n              return 'updateState';\n            }\n          }\n\n          return 'terminate';\n\n        default:\n          return 'terminate';\n      }\n    } // called in anticipation of a click event (before it's fired) to track the source\n    // of the click event (mouse, touch, key), and synthetically call node.click() if needed\n\n  }, {\n    key: 'manageClick',\n    value: function manageClick(type) {\n      var _this8 = this; // clear clickType timer if it's running\n\n\n      this.cancelTimeout('clickType'); // timer to reset the clickType,\n      // when it's left to the browser to call click(), the browser has queueTime\n      // to add the click event to the queue for it to be recognized as a known click event\n\n      var setClickTypeTimer = function setClickTypeTimer() {\n        _this8.manageSetTimeout('clickType', function () {\n          _this8.track.clickType = 'reset';\n        }, _constants.queueTime);\n      };\n\n      switch (type) {\n        case 'mouseClick':\n          this.track.clickType = 'mouseClick'; // let the browser call click() for mouse interactions\n\n          setClickTypeTimer();\n          break;\n\n        case 'tapClick':\n          this.track.clickType = 'tapClick'; // for touch interactions, use syntheticClick to call node.click() now and\n          // block the subsequent click event created by the browser if there is one\n\n          (0, _syntheticClick2.default)(this.topNode);\n          this.track.clickType = 'reset';\n          break;\n\n        case 'keyClick':\n          this.track.clickType = 'keyClick'; // if the element has a known interactive role (a, button, input, etc),\n          // then let the browser call click() for keyClick interactions (enter key and/or space bar)\n\n          if (_constants.knownRoleTags[this.tagName]) {\n            setClickTypeTimer(); // if the element doesn't have a known interactive role, but there is an onClick prop,\n            // then call node.click() directly as the browser won't fire a click event\n            // from a keyClick interaction\n          } else if (this.p.props.onClick) {\n            this.topNode.click();\n            this.track.clickType = 'reset';\n          }\n\n          break;\n\n        default:\n      }\n    } // returns 'terminate' if the caller (this.handleEvent) should not call updateState(...)\n    // in almost cases this will return terminate as click events don't change state,\n    // the one exception is an unknown but valid click event from a touch interaction,\n    // which will need to manageFocus, and then return whatever manageFocus says to do\n\n  }, {\n    key: 'handleClickEvent',\n    value: function handleClickEvent(e) {\n      // clear clickType timer if running\n      this.cancelTimeout('clickType');\n      var returnValue = 'terminate'; // if this is an unknown click event, make some assumptions\n\n      if (this.track.clickType === 'reset') {\n        // unknown click event on a form submit input with a recentEnterKeyDown on the document\n        // is considered to be a keyClick (when you press enter to submit a form\n        // but focus is not on the submit button)\n        var enterKeyFormSubmit = this.tagName === 'input' && this.type === 'submit' && _inputTracker2.default.key.recentEnterKeyDown;\n        if (enterKeyFormSubmit) this.track.clickType = 'keyClick';else if (_inputTracker2.default.touch.recentTouch || _inputTracker2.default.touch.touchOnScreen || _constants.deviceType === 'touchOnly') {\n          // if there is a recent touch on the document,\n          // or this is a unknown synthetic click event on a touchOnly device\n          returnValue = this.manageFocus('touchclick', e);\n          this.track.keyClick = 'tapClick'; // else this is a unknown synthetic click event on a mouseOnly or hybrid device\n        } else this.track.keyClick = 'mouseClick';\n      } // focus is not called on touch tap with links that open in a new window\n      // on pages that have been navigated to with pushState (only tested react router).\n      // So need to simulate a previous focus state of touch and a window blur event by\n      // signing up to be notified of next window focus event.\n      // Note that if navigated to www.example.tld/some-page with pushState link (e.g. RR Link)\n      // then focus is not called on tap, but if do a fresh page load for www.example.tld/some-page\n      // then focus is called on tap before opening the link in a new window (which is really weird).\n      // Note that focus not called means the browser doesn't respect focus calls generated by RI\n      // (and the browser may not generate a focus call itself, results varied by browser).\n      // This is only a problem on Android Chrome because despite not calling focus on link tap,\n      // upon returning to the window, focus is called on the element putting it\n      // into the focusFromTab state, when it should be in the focusFromTouch state.\n\n\n      if (this.p.props.target === '_blank' && this.track.clickType === 'tapClick' && !this.track.notifyOfNext.focus) {\n        this.track.previousFocus = 'touch';\n        this.track.notifyOfNext.focus = (0, _notifier.notifyOfNext)('focus', this.handleNotifyOfNext);\n      } // call onClick handler and pass in clickType (mouseClick, tapClick, keyClick) as 2nd argument\n\n\n      this.p.props.onClick && this.p.props.onClick(e, this.track.clickType);\n      this.track.clickType = 'reset';\n      return returnValue;\n    } // returns 'terminate' if the caller (this.handleEvent) should not call updateState(...)\n\n  }, {\n    key: 'handleOtherEvent',\n    value: function handleOtherEvent(e) {\n      switch (e.type) {\n        case 'focus':\n          this.p.props.onFocus && this.p.props.onFocus(e); // if this instance of RI is not the focus target, then don't enter the focus state\n\n          if (e.target !== this.topNode) return 'terminate'; // if this is a known focusTransition or focus is false,\n          // then set focus based on the type of focusTransition,\n\n          if (this.track.focusTransition !== 'reset' || !this.track.focus) {\n            var focusTransition = this.track.focusTransition.toLowerCase();\n\n            if (/mouse/.test(focusTransition)) {\n              this.track.focus = 'mouse';\n            } else if (/touch/.test(focusTransition) || this.track.touchDown) {\n              this.track.focus = 'touch';\n            } else if (this.track.reinstateFocus) {\n              this.track.focus = this.track.previousFocus;\n            } else if (!/forcestate/.test(focusTransition)) {\n              this.track.focus = 'tab';\n            }\n          } // if there was a timer set by a recent window focus event, clear it\n\n\n          this.cancelTimeout('windowFocus'); // only reinstate focus from window blur/focus for next focus event\n\n          this.track.reinstateFocus = false;\n          this.track.focusTransition = 'reset';\n          return 'updateState';\n\n        case 'blur':\n          this.p.props.onBlur && this.p.props.onBlur(e);\n          if (e.target !== this.topNode) return 'terminate';\n          this.track.focusTransition = 'reset';\n          this.track.previousFocus = this.track.focus;\n          this.track.focus = false;\n          this.track.spaceKeyDown = false;\n          this.track.enterKeyDown = false;\n          return 'updateState';\n\n        case 'keydown':\n          this.p.props.onKeyDown && this.p.props.onKeyDown(e);\n          if (!this.track.focus) return 'terminate';\n          if (e.key === ' ') this.track.spaceKeyDown = true;else if (e.key === 'Enter') {\n            this.track.enterKeyDown = true;\n            if (this.enterKeyTrigger) this.manageClick('keyClick');\n          } else return 'terminate';\n          return 'updateState';\n\n        case 'keyup':\n          this.p.props.onKeyUp && this.p.props.onKeyUp(e);\n          if (!this.track.focus) return 'terminate';\n          if (e.key === 'Enter') this.track.enterKeyDown = false;else if (e.key === ' ') {\n            this.track.spaceKeyDown = false;\n            if (this.spaceKeyTrigger) this.manageClick('keyClick');\n          } else return 'terminate';\n          return 'updateState';\n\n        case 'dragstart':\n          this.p.props.onDragStart && this.p.props.onDragStart(e);\n          this.track.drag = true;\n          return 'updateState';\n\n        case 'dragend':\n          this.p.props.onDragEnd && this.p.props.onDragEnd(e);\n          this.forceTrackIState('normal');\n          return 'updateState';\n\n        default:\n          return 'terminate';\n      }\n    }\n  }, {\n    key: 'computeStyle',\n    value: function computeStyle() {\n      // build style object, priority order: state styles, style prop, default styles\n      var style = {}; // add default styles first:\n      // if focusFromTab prop provided, then reset browser focus style,\n      // otherwise only reset it when focus is not from tab\n\n      if (!this.p.props.useBrowserOutlineFocus && (this.p.props.focusFromTab || this.state.focus !== 'tab' && !_constants.nonBlurrableTags[this.tagName])) {\n        style.outline = 0;\n        style.outlineOffset = 0;\n      } // if touchActive or active prop provided, then reset webkit tap highlight style\n\n\n      if ((this.p.props.touchActive || this.p.props.active) && _constants.deviceHasTouch) {\n        style.WebkitTapHighlightColor = 'rgba(0, 0, 0, 0)';\n      } // set cursor to pointer if clicking does something\n\n\n      var lowerAs = typeof this.p.props.as === 'string' && this.p.props.as.toLowerCase();\n\n      if (!this.p.props.useBrowserCursor && (this.p.props.onClick || lowerAs !== 'input' && this.p.props.tabIndex && (this.p.mouseFocusStyle.style || this.p.mouseFocusStyle.className) || lowerAs === 'input' && (this.p.props.type === 'checkbox' || this.p.props.type === 'radio' || this.p.props.type === 'submit') || lowerAs === 'button' || lowerAs === 'a' || lowerAs === 'area' || lowerAs === 'select') && !this.p.props.disabled) {\n        style.cursor = 'pointer';\n      } // add style prop styles second:\n\n\n      (0, _objectAssign2.default)(style, this.p.props.style); // add iState and focus state styles third:\n      // focus has priority over iState styles unless overridden in stylePriority\n\n      var hasPriority = this.state.iState === 'keyActive' || this.p.props.stylePriority && this.p.props.stylePriority[this.state.iState];\n      var iStateStyle = this.p[this.state.iState + 'Style'].style;\n      var focusStyle = this.state.focus ? this.p[this.state.focus + 'FocusStyle'].style : null;\n\n      if (hasPriority) {\n        (0, _objectAssign2.default)(style, focusStyle, iStateStyle);\n      } else {\n        (0, _objectAssign2.default)(style, iStateStyle, focusStyle);\n      }\n\n      return style;\n    }\n  }, {\n    key: 'computeClassName',\n    value: function computeClassName() {\n      // build className string, union of class names from className prop, iState className,\n      // and focus className (if in the focus state)\n      return (0, _extractStyle.joinClasses)(this.p.props.className || '', this.p[this.state.iState + 'Style'].className, this.state.focus ? this.p[this.state.focus + 'FocusStyle'].className : '');\n    } // compute children when there is an interactiveChild prop, returns the new children\n\n  }, {\n    key: 'computeChildren',\n    value: function computeChildren() {\n      var _this9 = this; // convert this.state.focus to the string focusFrom[Type] for use later\n\n\n      var focusFrom = this.state.focus && 'focusFrom' + this.state.focus.charAt(0).toUpperCase() + this.state.focus.slice(1); // does the current iState style have priority over the focus state style\n\n      var iStateStylePriority = this.p.props.stylePriority && this.p.props.stylePriority[this.state.iState];\n\n      var computeChildStyle = function computeChildStyle(props) {\n        var style = props.style ? _extends({}, props.style) : {};\n        (0, _extractStyle.setActiveAndFocusProps)(props);\n        var iStateStyle = (0, _extractStyle.extractStyle)(props, _this9.state.iState);\n        var focusStyle = _this9.state.focus && (0, _extractStyle.extractStyle)(props, focusFrom);\n        return {\n          className: (0, _extractStyle.joinClasses)(props.className || '', iStateStyle.className, focusStyle && focusStyle.className || ''),\n          style: iStateStylePriority && (0, _objectAssign2.default)(style, focusStyle.style, iStateStyle.style) || (0, _objectAssign2.default)(style, iStateStyle.style, focusStyle.style)\n        };\n      }; // recurse and map children, if child is an Interactive component, then don't recurse into\n      // it's children\n\n\n      var recursiveMap = function recursiveMap(children) {\n        return _react2.default.Children.map(children, function (child) {\n          if (!_react2.default.isValidElement(child)) return child; // if the child should not be shown, then return null\n\n          if (child.props.showOnParent) {\n            var showOn = child.props.showOnParent.split(' ');\n\n            if (!showOn.some(function (el) {\n              return el === _this9.state.iState || /Active/.test(_this9.state.iState) && el === 'active' || _this9.state.focus && (el === focusFrom || el === 'focus');\n            })) {\n              return null;\n            }\n          }\n\n          var childPropKeys = Object.keys(child.props); // if the child doesn't have any interactive child props, then return the child\n\n          if (!childPropKeys.some(function (key) {\n            return _constants.childInteractiveProps[key];\n          })) {\n            if (child.type === Interactive) return child; // if the child is not an Interactive component, then still recuse into its children\n\n            return _react2.default.cloneElement(child, {}, recursiveMap(child.props.children));\n          }\n\n          var newChildProps = {};\n          var childStyleProps = {}; // separate child props to pass through (newChildProps), from props used\n          // to compute the child's style (childStyleProps)\n\n          childPropKeys.forEach(function (key) {\n            if (!_constants.childInteractiveProps[key]) newChildProps[key] = child.props[key];else if (key !== 'showOnParent') {\n              childStyleProps['' + key.slice(8).charAt(0).toLowerCase() + key.slice(9)] = child.props[key];\n            }\n          });\n          childStyleProps.style = child.props.style;\n          childStyleProps.className = child.props.className;\n\n          var _computeChildStyle = computeChildStyle(childStyleProps),\n              style = _computeChildStyle.style,\n              className = _computeChildStyle.className;\n\n          newChildProps.style = style;\n          if (className) newChildProps.className = className; // can't use cloneElement because not possible to delete existing child prop,\n          // e.g. need to delete the prop onParentHover from the child\n\n          return _react2.default.createElement(child.type, newChildProps, child.type === Interactive ? child.props.children : recursiveMap(child.props.children));\n        });\n      };\n\n      return recursiveMap(this.p.props.children);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      // props to pass down:\n      // passThroughProps (includes event handlers)\n      // style\n      // className\n      this.p.passThroughProps.style = this.computeStyle();\n      var className = this.computeClassName();\n      if (className) this.p.passThroughProps.className = className;\n      var children = this.p.props.interactiveChild ? this.computeChildren() : this.p.props.children; // if `as` is a string (i.e. DOM tag name), then add the ref to props and render `as`\n\n      if (typeof this.p.props.as === 'string') {\n        this.p.passThroughProps.ref = this.refCallback;\n        return _react2.default.createElement(this.p.props.as, this.p.passThroughProps, children);\n      } // If `as` is a ReactClass or a ReactFunctionalComponent, then wrap it in a span\n      // so can access the DOM node without breaking encapsulation\n\n\n      return _react2.default.createElement('span', {\n        ref: this.refCallback,\n        style: this.p.props.wrapperStyle,\n        className: this.p.props.wrapperClassName\n      }, _react2.default.createElement(this.p.props.as, this.p.passThroughProps, children));\n    }\n  }]);\n\n  return Interactive;\n}(_react2.default.Component);\n\nInteractive.propTypes = _propTypes.propTypes;\nInteractive.defaultProps = _propTypes.defaultProps;\nexports.default = Interactive;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}