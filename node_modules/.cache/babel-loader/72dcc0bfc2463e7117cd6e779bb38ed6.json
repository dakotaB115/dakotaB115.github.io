{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nexports.extractStyle = extractStyle;\nexports.setActiveAndFocusProps = setActiveAndFocusProps;\nexports.joinClasses = joinClasses;\n\nvar _constants = require('./constants'); // extract and return the style object and className string for the state given\n\n\nfunction extractStyle(props, state) {\n  // if no hoverActive prop, then use hover prop for style and classes\n  var stateProp = state === 'hoverActive' && !props.hoverActive ? 'hover' : state; // loop until the state prop to use is found (i.e. it's not a string)\n\n  var times = 0;\n\n  while (typeof stateProp === 'string' && times < 10) {\n    stateProp = props[stateProp];\n    times++;\n  } // if the state prop to use wasn't found, then return a blank style and className object\n\n\n  if ((typeof stateProp === 'undefined' ? 'undefined' : _typeof(stateProp)) !== 'object') return {\n    style: null,\n    className: ''\n  };\n  var extract = {}; // check if the stateProp is an options object, and extract style and className from the stateProp\n\n  if (_constants.statePropOptionKeys.some(function (key) {\n    return stateProp[key];\n  })) {\n    extract.style = stateProp.style || null;\n    extract.className = stateProp.className || '';\n  } else {\n    // if the stateProp is not an options object, then it's a style object\n    extract.style = stateProp;\n    extract.className = '';\n  }\n\n  return extract;\n}\n\nfunction setActiveAndFocusProps(props) {\n  // use the `active` prop for `[type]Active` if no `[type]Active` prop\n  if (props.active) {\n    if (!props.hoverActive) props.hoverActive = props.active;\n    if (!props.touchActive) props.touchActive = props.active;\n    if (!props.keyActive) props.keyActive = props.active;\n  } // use the `focus` prop for `focusFrom[type]` if no `focusFrom[type]` prop\n\n\n  if (props.focus) {\n    if (!props.focusFromTab) props.focusFromTab = props.focus;\n    if (!props.focusFromMouse) props.focusFromMouse = props.focus;\n    if (!props.focusFromTouch) props.focusFromTouch = props.focus;\n  }\n}\n\nfunction joinClasses(className, iStateClass, focusClass) {\n  var joined = className;\n  joined += joined && iStateClass ? ' ' + iStateClass : '' + iStateClass;\n  joined += joined && focusClass ? ' ' + focusClass : '' + focusClass;\n  return joined;\n}","map":null,"metadata":{},"sourceType":"script"}