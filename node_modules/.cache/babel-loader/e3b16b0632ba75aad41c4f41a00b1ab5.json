{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.focusRegistry = undefined;\nexports.updateMouseFromRI = updateMouseFromRI;\n\nvar _notifier = require('./notifier');\n\nvar _constants = require('./constants'); // the shape of what's being tracked globally\n// the input object is the default export\n\n\nvar input = {\n  mouse: {\n    mouseOnDocument: false,\n    clientX: 0,\n    clientY: 0,\n    buttons: 0\n  },\n  touch: {\n    touchOnScreen: false,\n    recentTouch: false\n  },\n  key: {\n    recentEnterKeyDown: false\n  }\n}; // update touch input tracking\n\nvar touchTimerID = null;\n\nfunction updateTouch(e) {\n  if (e.type === 'touchstart') {\n    input.touch.touchOnScreen = true;\n    input.mouse.mouseOnDocument = false;\n  } else if (e.type === 'touchend' || e.type === 'touchcancel') {\n    input.touch.recentTouch = true;\n    if (touchTimerID) window.clearTimeout(touchTimerID);\n    touchTimerID = window.setTimeout(function () {\n      input.touch.recentTouch = false;\n      touchTimerID = null;\n    }, _constants.queueTime);\n  }\n\n  if (e.touches.length === 0) {\n    input.touch.touchOnScreen = false;\n  }\n} // update mouse input tracking\n\n\nfunction updateMouse(e) {\n  input.mouse.clientX = e.clientX;\n  input.mouse.clientY = e.clientY;\n  input.mouse.buttons = e.buttons;\n  if (e.type === 'mouseleave') input.mouse.mouseOnDocument = false;else input.mouse.mouseOnDocument = true;\n} // only update mouse if the mouse event is not from a touch event\n\n\nfunction updateHybridMouse(e) {\n  if (input.touch.recentTouch || input.touch.touchOnScreen) return;\n  updateMouse(e);\n} // update recent enter keydown tracking, used for form submission detection\n\n\nvar enterKeyDownTimerID = null;\n\nfunction updateEnterKeyDown(e) {\n  if (e.key === 'Enter') {\n    input.key.recentEnterKeyDown = true;\n    if (enterKeyDownTimerID) window.clearTimeout(enterKeyDownTimerID);\n    enterKeyDownTimerID = window.setTimeout(function () {\n      input.key.recentEnterKeyDown = false;\n      enterKeyDownTimerID = null;\n    }, _constants.queueTime);\n  }\n} // update mouse from RI - this is required for enter and leave events from RI elements\n// because when the mouse is moved onto an RI element the most recent mousemove event\n// will have the mouse coordinates as off the element, so need to get updated coordinates\n// from the react event\n\n\nfunction updateMouseFromRI(e) {\n  updateMouse(e);\n  input.mouse.mouseOnDocument = true;\n} // sign up for notification of touch events if the device supports the touch events api\n\n\nif (_constants.deviceHasTouch) {\n  (0, _notifier.notifyOfAll)(Object.keys(_constants.touchEvents), updateTouch);\n} // sign up for notification of mouse events if the device has a mouse\n\n\nif (_constants.deviceHasMouse) {\n  (0, _notifier.notifyOfAll)(Object.keys(_constants.mouseEvents), _constants.deviceType === 'hybrid' ? updateHybridMouse : updateMouse);\n} // sign up for notification of enter keydown events for form submission detection\n\n\n(0, _notifier.notifyOfAll)(['keydown'], updateEnterKeyDown); // focus registry used by RI to track events that cause focus/blur calls (e.g. mousedown)\n// so focus/blur is not called twice as event bubbles through nested RIs\n\nvar focusRegistry = exports.focusRegistry = {\n  focus: null,\n  blur: null\n};\nexports.default = input;","map":null,"metadata":{},"sourceType":"script"}