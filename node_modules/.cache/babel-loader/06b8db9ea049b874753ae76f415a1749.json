{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.childInteractiveProps = exports.defaultTapTimeCutoff = exports.queueTime = exports.knownProps = exports.knownRoleTags = exports.nonBlurrableTags = exports.statePropOptionKeys = exports.stateProps = exports.iStates = exports.otherEvents = exports.touchEvents = exports.mouseEvents = exports.passiveEventSupport = exports.deviceHasMouse = exports.deviceHasTouch = exports.deviceType = undefined;\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nexports.enterKeyTrigger = enterKeyTrigger;\nexports.spaceKeyTrigger = spaceKeyTrigger;\nexports.dummyEvent = dummyEvent;\n\nvar _detectIt = require('detect-it');\n\nvar _detectIt2 = _interopRequireDefault(_detectIt);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nvar deviceType = exports.deviceType = _detectIt2.default.deviceType;\nvar deviceHasTouch = exports.deviceHasTouch = _detectIt2.default.hasTouch;\nvar deviceHasMouse = exports.deviceHasMouse = _detectIt2.default.hasMouse;\nvar passiveEventSupport = exports.passiveEventSupport = _detectIt2.default.passiveEvents;\nvar mouseEvents = exports.mouseEvents = {\n  mouseenter: 'onMouseEnter',\n  mouseleave: 'onMouseLeave',\n  mousemove: 'onMouseMove',\n  mousedown: 'onMouseDown',\n  mouseup: 'onMouseUp'\n};\nvar touchEvents = exports.touchEvents = {\n  touchstart: 'onTouchStart',\n  touchend: 'onTouchEnd',\n  touchcancel: 'onTouchCancel'\n};\nvar otherEvents = exports.otherEvents = {\n  focus: 'onFocus',\n  blur: 'onBlur',\n  keydown: 'onKeyDown',\n  keyup: 'onKeyUp',\n  dragstart: 'onDragStart',\n  dragend: 'onDragEnd'\n};\nvar iStates = exports.iStates = {\n  normal: true,\n  hover: true,\n  hoverActive: true,\n  touchActive: true,\n  keyActive: true\n};\n\nvar stateProps = exports.stateProps = _extends({}, iStates, {\n  active: true,\n  focus: true,\n  focusFromTab: true,\n  focusFromMouse: true,\n  focusFromTouch: true\n});\n\nvar statePropOptionKeys = exports.statePropOptionKeys = ['style', 'className']; // don't toggle focus on these tags\n\nvar nonBlurrableTags = exports.nonBlurrableTags = {\n  input: true,\n  textarea: true,\n  select: true\n}; // tags with known roles, and that the browser may have a click handler for\n\nvar knownRoleTags = exports.knownRoleTags = _extends({}, nonBlurrableTags, {\n  button: true,\n  a: true,\n  area: true\n}); // elements triggered by the enter key\n\n\nfunction enterKeyTrigger(tag, type) {\n  return tag !== 'select' && (tag !== 'input' || type !== 'checkbox' && type !== 'radio');\n} // elements triggered by the space bar\n\n\nfunction spaceKeyTrigger(tag, type) {\n  return tag === 'button' || tag === 'select' || tag === 'input' && (type === 'checkbox' || type === 'radio' || type === 'submit');\n} // known props to not pass through, every prop not on this list is passed through\n\n\nvar knownProps = exports.knownProps = _extends({}, stateProps, {\n  children: true,\n  as: true,\n  style: true,\n  className: true,\n  wrapperStyle: true,\n  wrapperClassName: true,\n  onStateChange: true,\n  setStateCallback: true,\n  onClick: true,\n  onTapTwo: true,\n  onTapThree: true,\n  onTapFour: true,\n  onLongPress: true,\n  tapTimeCutoff: true,\n  onMouseEnter: true,\n  onMouseLeave: true,\n  onMouseMove: true,\n  onMouseDown: true,\n  onMouseUp: true,\n  onTouchStart: true,\n  onTouchMove: true,\n  onTouchEnd: true,\n  onTouchCancel: true,\n  onFocus: true,\n  onBlur: true,\n  onKeyDown: true,\n  onKeyUp: true,\n  forceState: true,\n  initialState: true,\n  refDOMNode: true,\n  mutableProps: true,\n  useBrowserOutlineFocus: true,\n  useBrowserCursor: true,\n  touchActiveTapOnly: true,\n  extraTouchNoTap: true,\n  focusToggleOff: true,\n  stylePriority: true,\n  nonContainedChild: true,\n  interactiveChild: true\n}); // ms to allow for the browser to add subsequent event to the queue in setTimeouts\n\n\nvar queueTime = exports.queueTime = 600;\nvar defaultTapTimeCutoff = exports.defaultTapTimeCutoff = 500;\n\nfunction dummyEvent(type) {\n  return {\n    type: type,\n    persist: function persist() {},\n    preventDefault: function preventDefault() {},\n    stopPropagation: function stopPropagation() {}\n  };\n}\n\nvar childInteractiveProps = exports.childInteractiveProps = {\n  showOnParent: true,\n  onParentNormal: true,\n  onParentHover: true,\n  onParentActive: true,\n  onParentHoverActive: true,\n  onParentTouchActive: true,\n  onParentKeyActive: true,\n  onParentFocus: true,\n  onParentFocusFromTab: true,\n  onParentFocusFromMouse: true,\n  onParentFocusFromTouch: true\n};","map":null,"metadata":{},"sourceType":"script"}