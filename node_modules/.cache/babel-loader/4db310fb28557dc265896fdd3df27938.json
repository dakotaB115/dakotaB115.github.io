{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = compareProps;\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _constants = require('./constants');\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n} // shallow compare of two sets of props, can be called recursivly,\n// returns true if the props are the same, and false if they are not the same\n\n\nfunction compareProps(propsA, propsB) {\n  // If children are ReactElements, e.g. JSX as opposed to strings,\n  // they will not be equal even if they are the same because React.createElement(...)\n  // returns a new instance every time and is usually called on every render,\n  // so unless there is a deep compare of the ReactElement tree of children,\n  // it doesn't make sense to continue checking other props.\n  // Note, that when nothing has changed in props,\n  // the only thing that's not equal are the children, so check first.\n  if (propsA.children !== propsB.children) return false;\n  var keysB = Object.keys(propsB); // don't include forceState when comparing props\n  // forceState is handled in componentWillReceiveProps\n\n  var nextPOffset = propsB.forceState ? -1 : 0;\n  var pOffset = propsA.forceState ? -1 : 0;\n  if (keysB.length + nextPOffset !== Object.keys(propsA).length + pOffset) return false; // if it's an state prop options object, then shallow compare the options for equality\n\n  var sameStateProp = function sameStateProp(stateProp) {\n    // if propsB doesn't have any of the options object keys, then return false b/c not options obj\n    if (!_constants.statePropOptionKeys.some(function (key) {\n      return propsB[stateProp][key];\n    })) return false; // shallow compare the options for equality\n\n    return _constants.statePropOptionKeys.every(function (key) {\n      return propsB[stateProp][key] === propsA[stateProp][key];\n    });\n  }; // loop through props\n\n\n  for (var i = 0; i < keysB.length; i++) {\n    // skip if prop is forceState\n    if (keysB[i] !== 'forceState') {\n      // do propsA and propsB both have the property as their own?\n      if (!Object.prototype.hasOwnProperty.call(propsA, keysB[i])) return false; // if the two props aren't equal, do some additional checks before returning false\n\n      if (propsB[keysB[i]] !== propsA[keysB[i]]) {\n        if (keysB[i] === 'as') {\n          if (_react2.default.isValidElement(propsA.as) && _react2.default.isValidElement(propsB.as)) {\n            // If `as` is JSX/ReactElement, first check to see if `as.type` is the same,\n            // e.g. 'div', 'span', ReactClass, ReactFunctionalComponent, and then shallowly\n            // compare it's props with a recursive call to sameProps - this should only recurse\n            // one time because the JSX/ReactElement shouldn't have the `as` prop.\n            if (propsA.as.type !== propsB.as.type) return false;\n            if (!compareProps(propsA.as.props, propsB.as.props)) return false;\n          } else {\n            return false;\n          } // if the prop is a state, check one level deeper if the props are equal\n\n        } else if (!(_constants.stateProps[keysB[i]] && sameStateProp(keysB[i]))) {\n          return false;\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}